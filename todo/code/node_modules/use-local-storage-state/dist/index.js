"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const data = {};
const storage = {
    get(key, defaultValue) {
        var _a, _b;
        try {
            return (_a = data[key]) !== null && _a !== void 0 ? _a : JSON.parse((_b = localStorage.getItem(key)) !== null && _b !== void 0 ? _b : '');
        }
        catch (_c) {
            return defaultValue;
        }
    },
    set(key, value) {
        try {
            localStorage.setItem(key, JSON.stringify(value));
            data[key] = undefined;
            return true;
        }
        catch (_a) {
            data[key] = value;
            return false;
        }
    },
};
const initializedStorageKeys = new Set();
function useLocalStorageState(key, defaultValue) {
    const [state, setState] = react_1.useState(() => {
        const isCallable = (value) => typeof value === 'function';
        return {
            isPersistent: (() => {
                if (typeof window === 'undefined') {
                    return true;
                }
                try {
                    localStorage.setItem('--use-local-storage-state--', 'dummy');
                    localStorage.removeItem('--use-local-storage-state--');
                    return true;
                }
                catch (_a) {
                    return false;
                }
            })(),
            value: isCallable(defaultValue)
                ? storage.get(key, defaultValue())
                : storage.get(key, defaultValue),
        };
    });
    const updateValue = react_1.useCallback((newValue) => {
        setState((state) => {
            const isCallable = (value) => typeof value === 'function';
            const value = isCallable(newValue) ? newValue(state.value) : newValue;
            return {
                value: value,
                isPersistent: storage.set(key, value),
            };
        });
    }, [key]);
    react_1.useEffect(() => {
        if (initializedStorageKeys.has(key)) {
            throw new Error(`Multiple instances of useLocalStorageState() has been initialized with the same key. ` +
                `Use createLocalStorageStateHook() instead. ` +
                `Example implementation: ` +
                `https://github.com/astoilkov/use-local-storage-state#create-local-storage-state-hook-example`);
        }
        else {
            initializedStorageKeys.add(key);
        }
        return () => void initializedStorageKeys.delete(key);
    }, []);
    react_1.useEffect(() => {
        const onStorage = (e) => {
            if (e.storageArea === localStorage && e.key === key) {
                setState({
                    isPersistent: true,
                    value: e.newValue === null ? defaultValue : JSON.parse(e.newValue),
                });
            }
        };
        window.addEventListener('storage', onStorage);
        return () => window.removeEventListener('storage', onStorage);
    }, []);
    return [state.value, updateValue, state.isPersistent];
}
exports.default = useLocalStorageState;
function createLocalStorageStateHook(key, defaultValue) {
    const updates = [];
    return function useLocalStorageStateHook() {
        const [value, setValue, isPersistent] = useLocalStorageState(key, defaultValue);
        const updateValue = react_1.useCallback((newValue) => {
            for (const update of updates) {
                update(newValue);
            }
        }, []);
        react_1.useEffect(() => {
            initializedStorageKeys.delete(key);
        }, []);
        react_1.useEffect(() => {
            updates.push(setValue);
            return () => void updates.splice(updates.indexOf(setValue), 1);
        }, [setValue]);
        return [value, updateValue, isPersistent];
    };
}
exports.createLocalStorageStateHook = createLocalStorageStateHook;
